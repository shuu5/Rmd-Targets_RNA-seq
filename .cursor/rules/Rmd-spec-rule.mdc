---
description: 
globs: 
alwaysApply: false
---
# Rmdモジュール仕様書 作成ルール

## 1. 基本方針
- **目的:** Rmdディレクトリ内の各モジュールについて、その設計意図、機能、利用方法を明確に文書化し、開発効率、保守性、再利用性を向上させる。
- **対象:** `Rmd/` ディレクトリに格納されるすべてのRmdファイル（共通モジュール含む）。
- **連携:** このルールは `project-rule.md` を補完するものであり、すべてのルールに従うこと。
- **形式:** Markdown形式 (`.md`) で記述する。
- **タイミング:** 原則として、Rmdモジュール実装 **前** に作成または更新する。

## 2. ファイル命名と保存場所
- **ファイル名:** 仕様書対象のRmdファイル名に対応させ、`spec_{Rmdファイル名（拡張子なし）}.md` とする。(例: `spec_qc_report.md`, `spec_deg_analysis_report.md`)
- **保存場所:** `specs/Rmd/` ディレクトリを作成し、その下に格納する。 (例: `specs/Rmd/spec_qc_report.md`)

## 3. 仕様書の構成要素
各Rmdモジュールの仕様書には、以下の要素（セクション）を含めてください。これらの要素は、後述する「4. 各構成要素の詳細と推奨事項」で詳述します。

```markdown
# Rmdモジュール仕様書: {Rmdファイル名}

## 1. 概要
## 2. レポート内容詳細
## 3. 入力パラメータ (params)
## 4. 依存ターゲット
## 5. 出力ファイル
## 6. レポート構成 / 主要セクション
## 7. ログ仕様 (`futile.logger`)
## 8. 特殊機能・技術要件
## 9. 依存パッケージ
## 10. 関連ファイル
## 11. 再利用ガイドライン
```

## 4. 各構成要素の詳細と推奨事項

### 4.1. 概要
- **目的:** このRmdモジュールが生成するレポートの目的や対象読者を簡潔に記述する。
- **レポート種類:** QCレポート、DEG解析レポート、エンリッチメント解析レポートなど。
- **作成日:** YYYY-MM-DD
- **更新日:** YYYY-MM-DD

### 4.2. レポート内容詳細
- このRmdモジュールが含む主要なセクション、図表、解析結果を箇条書きなどで詳細に説明する。
- レポート全体の流れや構成を記述する。
- 重要な解析結果の解釈ガイドラインがあれば記述する。
- `project-rule.md` のどの解析ステップやレポート要件に対応するかを明記する。

### 4.3. 入力パラメータ (params)
- Rmdの各パラメータについて、以下の情報をテーブル形式またはリスト形式で記述する。
    - **パラメータ名:**
    - **データ型:** (例: `character`, `numeric`, `logical`)
    - **説明:** パラメータの内容、期待される形式、制約などを具体的に記述する。
    - **必須/任意:** パラメータが必須か任意かを示す。
    - **デフォルト値:** 任意パラメータの場合のデフォルト値。

### 4.4. 依存ターゲット
- このRmdモジュールが `targets::tar_read(シンボル名)` で読み込む targets オブジェクトを**固定のシンボル名で**リストアップする。
    - **ターゲット名:** (例: `obj_se_normalized`, `file_plot_pca`) (**シンボル名で記述**)
    - **データ型:** ターゲットが返すデータの型 (例: `SummarizedExperiment`, `fs::path`)
    - **説明:** ターゲットデータの内容、利用目的などを具体的に記述する。
    - **必須/任意:** このターゲットが常に必要か、条件付きで必要かを示す。

### 4.5. 出力ファイル
- レンダリングによって生成されるレポートファイルについて記述する。
    - **ファイル名:** 生成されるファイルの命名規則。`{レポート名}.html` のような形式を推奨。
    - **ファイルパス:** 保存場所のルール (`results/{experiment_id}/reports/...` など)。`results/{experiment_id}/reports` を推奨。
    - **ファイル形式:** (例: `HTML`, `PDF`, `MD`)。HTMLを推奨。
    - **ファイル構成:** 生成される他の関連ファイル（画像、データなど）がある場合は説明する。
    - **推奨出力設定:** 全てのRmdモジュールで共通の以下の設定を推奨する。
        ```r
        output_format = rmarkdown::html_document(
          toc = TRUE,          # 目次
          toc_float = TRUE,    # 浮動目次
          code_folding = "hide", # コード折りたたみ
          theme = "flatly",    # テーマ
          df_print = "paged",   # データフレーム表示方法
          keep_md = TRUE      # デバッグ用に中間マークダウンファイルを保持
        )
        ```
    - **絶対パスの使用:** 全てのRmdファイルでは、セットアップチャンクで以下の設定を行い、knitrでの画像読み込みに絶対パスを使用すること。
        ```r
        options(knitr.graphics.rel_path = FALSE)
        ```

### 4.6. レポート構成 / 主要セクション
- Rmdファイル内の主要なチャンクやセクションを順に記述する。
- 各セクションやチャンクの目的、役割、表示内容を具体的に説明する。
- **インタラクティブ要素（Shiny, plotly, htmlwidgets, DTなど）は使用しない。**
- タブ、折りたたみセクションなど、静的なUIコンポーネントを使用する場合はその説明も含める。
- **推奨レポート構成:**
  1. **概要セクション:** レポートの目的と主要な結果のサマリー
  2. **データ概要セクション:** 使用データの基本情報（サンプル数、遺伝子数など）
  3. **解析結果セクション:** 可視化と表、解釈を含む主要な解析結果
  4. **詳細情報セクション:** 必要に応じて、詳細データや補足情報
  5. **セッション情報セクション:** `sessionInfo()` を使用した再現性情報

### 4.7. ログ仕様 (`futile.logger`)
- `project-rule.md` とのロギング方針に基づき、このRmdモジュールが出力する主要なログメッセージを記述する。
- **個別ログファイル (`logs/{experiment_id}/{Rmdファイル名}.log`) へのログ出力:**
    - `setup_logging.Rmd` (または `setup_rmd_logging` 関数) によってファイルが初期化される。
    - Rmdファイル内の `log_info()`, `log_debug()`, `log_trace()` などを使って、TRACEレベルまでの詳細なログを記録する。
    - **ログレベル:** 各メッセージのログレベル (`INFO`, `DEBUG`, `TRACE`, `WARN`, `ERROR`) を明記する。
    - **ログ内容:** Rmdレンダリング開始/終了（個別ログファイル内）、主要チャンク実行、データ読み込み、データ処理、図表生成などを具体的に記述する。
- **ログファイル名:** `logs/{experiment_id}/{Rmdファイル名}.log` に出力されることを明記。
- **Rmdでのログ実装例:**
  ```R
  ---
  title: "レポート"
  params:
    experiment_id: !r getOption("TARGETS_EXPERIMENT_ID", "default_experiment")
  ---

  ```{r setup, include=FALSE, child="Rmd/common/setup_logging.Rmd"}
  ```

  ```{r data_load}
  # 固定シンボル名で読み込む
  data <- tar_read(obj_data)
  log_info("データ読み込み完了: %d行", nrow(data))

  # 固定シンボル名で読み込む
  se <- tar_read(obj_se_normalized)
  log_info("正規化済みSEオブジェクト読み込み: %d genes x %d samples", nrow(se), ncol(se))
  ```

  ```{r plot_display, fig.cap="PCA plot of normalized data"}
  # 固定シンボル名で読み込む
  pca_plot_path <- tar_read(file_plot_pca)
  log_debug("PCAプロットファイルパス: %s", pca_plot_path)

  if (file.exists(pca_plot_path)) {
    knitr::include_graphics(pca_plot_path)
    log_info("PCAプロット表示")
  } else {
    log_warn("PCAプロットファイルが存在しません: %s", pca_plot_path)
  }
  ```

### 4.8. 特殊機能・技術要件
- このRmdモジュールで使用する特殊なknitrオプション、レンダリング設定、CSSカスタマイズなどを記述する。
- **インタラクティブプロット（plotly, htmlwidgets）、動的テーブル（DT）、Shiny機能などの特殊技術は使用しない。**
- レスポンシブデザイン対応や特定のブラウザ要件などがあれば記述する。
- **インタラクティブ要素は使用しないため、関連する推奨はありません。**

### 4.9. 依存パッケージ
- このRmdモジュールが依存するRパッケージ（`library()`で読み込むもの）をリストアップする。
- 特定のバージョン要件がある場合は明記する。
- `renv` で管理されていることを前提とする。
- **推奨パッケージ:**
  - `rmarkdown`: 基本レンダリング
  - `knitr`: コードチャンク管理
  - `htmltools`: HTML要素操作 (静的な場合に限り限定的に使用可)
  - `bslib`: Bootstrapスタイリング
  - `futile.logger`: ロギング

### 4.10. 関連ファイル
- このRmdモジュールに関連する他のファイルをリストアップする。
    - 共通CSSファイル
    - インクルードされるRmd子ドキュメント
    - ユーティリティRスクリプト
    - 参照される静的リソース（画像など）
- **推奨される共通コンポーネント:**
  - `setup_logging.Rmd`: ロギング設定
  - `data_summary.Rmd`: データ概要表示
  - `session_info.Rmd`: セッション情報表示
  - `visualization_helpers.Rmd`: 共通可視化関数

### 4.11. 再利用ガイドライン
- このRmdモジュールの再利用、カスタマイズ方法に関するガイドラインを記述する。
- 異なる実験データに適用する際の注意点や必要な変更箇所を説明する。
- 拡張の推奨方法や制限事項があれば記述する。
- **モジュール化と再利用の推奨方法:**
  - 類似レポート間で共通のセクションやチャンクは子Rmdドキュメントとして抽出する
  - `child` チャンクオプションを使用して共通コードを読み込む
  - 子ドキュメントへのパラメータ渡しには事前に環境変数を設定する

## 5. Rmdモジュール実装の基本原則
- **目的の明確化:** 各Rmdモジュールは明確な目的を持ち、特定の解析結果やレポートの生成に焦点を当てること。
- **ライブラリの分離とモジュール化:**
  - `Rmd/common/setup_logging.Rmd` には共通のロギング関連ライブラリのみを含める
  - 各Rmdファイルには独自の専用setupチャンク（例: `setup_[rmd_name]`）を設け、そのRmdで必要となる特定のライブラリを読み込む（`4.9 依存パッケージ` 参照）。
  - これにより、各モジュールは独立性が高まり、メンテナンス性が向上する
- **データロジックの分離:** 複雑な計算処理や解析ロジックは `R/` ディレクトリ内のR関数で実装し、Rmdモジュールでは主にデータの可視化と解釈に集中すること。
- **ターゲット依存関係の明示:** `tar_read(シンボル名)` で読み込むすべてのターゲットを**固定のシンボル名で**明示し、仕様書の「4.4. 依存ターゲット」に記録すること。
- **モジュール化と再利用:** 共通コードは子Rmdドキュメントや共通関数として実装し（`4.10 関連ファイル`、`4.11 再利用ガイドライン` 参照）、複数のレポートで再利用できるようにすること。
- **一貫したスタイリング:** レポート全体で一貫したスタイリング（フォント、色、レイアウト等）を使用すること（`4.5 出力ファイル` の `theme` や、共通CSSファイル（`4.10 関連ファイル`）を参照）。
- **コードの表示/非表示:** 基本的にはコードを非表示（`echo=FALSE`）とし、必要に応じて折りたたみ表示（`code_folding="hide"`）を使用すること（`4.5 出力ファイル` の推奨設定参照）。
- **図表のキャプション:** すべての図表に明確なキャプションを付けること。
- **ロギングの実装:** 「4.7. ログ仕様」に従い、適切なログメッセージを出力すること。
- **インタラクティブ要素の禁止:** レポートの静的性を保つため、Shiny, plotly, htmlwidgets, DTなどのインタラクティブ要素は一切使用しないこと。
