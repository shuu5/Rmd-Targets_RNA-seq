---
description: 
globs: 
alwaysApply: false
---
# R Markdown & `targets` RNA-seq パイプライン AI構築ルール (要約版)

## 1. 基本方針
- このルールを読み込んだら「rmd-ruleに従います！」と発言して。
- パイプライン制御: `targets` パッケージを使用。
- 解析ステップ: R Markdown (Rmd) モジュール (`tar_render`) で実装。
- データ中心: `SummarizedExperiment` (SE) オブジェクトを使用。
- 履歴記録: SEの `metadata()$pipeline_history` に処理履歴を記録。

## 1.1. ターゲットとオブジェクトの命名規則
- **プレフィックス付与:** ターゲットには種類を示すプレフィックスを使用:
  - `obj_`: データオブジェクト (例: `obj_se_raw`)
  - `rmd_`: Rmdモジュールのレンダリング結果 (例: `rmd_create_se`)
  - `rep_`: レポートファイル (例: `rep_qc_report`)
  - `plt_`: プロット・図表 (例: `plt_pca`)
  - `tbl_`: テーブル・表 (例: `tbl_de_genes`) 
  - `utl_`: ユーティリティターゲット (例: `utl_setup`)
- **命名パターン:** `[プレフィックス]_[内容]_[状態/段階]`の形式を採用。
- **例:** `obj_se_normalized`(正規化済みSEオブジェクト), `rmd_normalize_se`(SE正規化モジュール)

## 2. ディレクトリ構造とファイル命名
- **必須:**
    - `_targets.R`: パイプラインのターゲット定義と依存関係を記述。
    - `Rmd/`: 各解析ステップのRmdモジュールを格納。
    - `data/{experiment_id}/`: 実験ごとの入力データを格納。
    - `results/{experiment_id}/`: 実験ごとの出力結果を格納（plots/, tables/, reports/サブディレクトリを推奨）。
    - `logs/{experiment_id}/`: 実験ごとのログファイルを格納。
    - `config.yaml`: パイプライン設定ファイル（必須）。
    - `spec/`: モジュール仕様書を格納。
    - `tests/`: Rmdモジュールのユニットテスト。
    - `renv/`, `renv.lock`: パッケージ管理。
    - `R/`: 共通ユーティリティ関数を格納。
- **ファイルパス:** 原則として `fs::path_abs()` で絶対パスを使用。

## 3. データフロー
- **入力:**
    - **実験 ID (`experiment_id`):** パイプライン実行時に指定される、解析対象の実験を識別する ID。
    - **最初の Rmd モジュール:** `experiment_id` に基づいて、対応するデータファイルから SE オブジェクトを生成。
    - **後続 Rmd モジュール:** 前のステップで生成/更新された SE オブジェクトを入力ターゲットとする。
- **処理:** 各 Rmd モジュールは入力 SE オブジェクトを処理し、更新された SE オブジェクトを出力。
- **メタデータ:** 各モジュールは実行内容、パラメータ、日時等を `metadata()$pipeline_history` に追記。
- **制御:** `_targets.R` でSEメタデータによる条件分岐を検討。**ファイルパスは絶対パス (`fs::path_abs()`) で指定。**

## 4. ロギング (`futile.logger` 必須)
- **基本方針:**
    - パイプライン実行状況の追跡と再現性向上のため、**`futile.logger`によるログ記録を必須とする**。
    - ログはログファイル(`logs/{experiment_id}/`)にのみ出力し、**レンダリング出力(HTML/MD)には表示しない**。
    - ログ出力と解析結果表示は明確に分離する（Rmdチャンクの`include=FALSE`オプションを使用）。
- **ログ設定:**
    - **ログレベル:** TRACE(最詳細) < DEBUG < INFO < WARN < ERROR < FATAL(最重大)。
    - **出力制御:** 基本は`_targets.R`で`flog.threshold(INFO)`で一元管理、Rmdでは`TRACE`レベルまで記録。
    - **ログフォーマット:** `[タイムスタンプ] [ログレベル] [識別子] メッセージ`。
    - **ファイル名:** `logs/{experiment_id}/_targets.log`, `logs/{experiment_id}/{Rmdファイル名}.log`。
- **必須ログ内容:**
    - **`_targets.R`:** パイプライン開始/終了、設定値読み込み、ターゲット実行開始/終了。
    - **Rmd:** セットアップチャンクでロガー設定（必ず`include=FALSE`）、入力/出力オブジェクト、主要処理ステップ、SEメタデータ更新内容、エラー/警告。
    - **ログレベルの使い分け:** TRACE/DEBUG(詳細処理過程)、INFO(主要ステップ)、WARN/ERROR(問題発生)。

## 5. コーディング規約とテスト
- **スタイル:** Tidyverse スタイル + Bioconductor コーディング規約。
- **コメント言語:** **コード内のコメントは原則として日本語で記述する。**
- **共通ユーティリティ関数:** 
    - **`R/utility.R`** を参照して利用可能な関数を確認する。
    - ロギング設定や履歴記録などの共通機能を使用してコード重複を避ける。
    - 各Rmdモジュールで明示的に関数を呼び出す（`source()`は使用しない）。
    - 新たな共通関数を追加する場合は、`R/utility.R`に実装し、`spec/utility_spec.md`に仕様を記録する。
- **テスト (TDD):** **Rmd モジュール**実装時は、**Red-Green-Refactor サイクル**を厳守:
    1. **Red:** 失敗するテストコードを `testrmd` で記述。
    2. **Green:** テストをパスする最小限のコードを Rmd モジュール内に実装。
    3. **Refactor:** テストが通る状態を維持しつつコードをリファクタリング。
    - テスト記述には `testrmd` パッケージを使用。

## 6. 再現性とパッケージ管理
- **再現性:** `targets` で依存関係とキャッシュを管理。
- **パッケージ管理:** `renv` を使用。`renv::snapshot()` で `renv.lock` を更新。必要な `library()` を記述。`sessionInfo()` はレポートに含める。

## 7. モジュール仕様書 (AI向け指示の必須項目)
指示には以下を含むこと:
- **ターゲット名:** `experiment_id` に依存しない汎用的な名前を基本とする。
- **目的:** このターゲットがパイプラインで果たす役割。
- **入力ターゲット:** 依存ターゲット名、期待される入力SE状態、その他の入力ファイル/パラメータ。
- **実行コマンド/処理:** 関連するRmdファイル名、主要処理ステップ/パラメータ（`experiment_id`は`params`で渡す）、SEメタデータ更新ロジック、ログ出力設定。
- **必須ロギング要件:** 使用するロガー名、記録すべき主要情報、ログレベルの使い分け。
- **出力ターゲット:** 生成されるオブジェクト名、更新後のSE状態、生成されるファイルの命名規則と保存場所。
- **レポート要件:** 含めるべき図表、統計情報、テキスト概要。
- **その他:** エラーハンドリング、特別な制約など。

## 8. パイプライン構成 (`_targets.R`)
- **モジュール実行順序:** ターゲット間の依存関係で定義。ファイル名は可読性の補助として意味のある名前を使用。
- **パイプラインの柔軟性:** `_targets.R` の修正でモジュール組み合わせや条件分岐による実行制御が可能。**`experiment_id` を変更して再実行することで、異なる実験データに同じ解析フローを適用可能。**

## 9. 可視化とレポート
- **標準パッケージ:** `ggplot2`, `pheatmap`, `ComplexHeatmap`, `RColorBrewer`, `viridis`。
- **プロットの標準スタイル:**
  - **テーマ:** `theme_classic()`を基本とし、プロットタイトルは中央寄せ。
  - **言語:** プロット内のテキストはすべて英語（レポート本文は日本語可）。
  - **ファイル形式:** 基本はPNG、長大なプロットはPDF、対話的プロットはHTML。
  - **命名規則:** `{プロットタイプ}_{データタイプ}_{条件}.{拡張子}`
  - **保存場所:** `results/{experiment_id}/plots/`ディレクトリ。
  - **サイズ・解像度:** レポート表示に適したサイズと解像度（300dpi以上推奨）。
- **プロット生成管理:**
  - 重要なプロット生成ロジックはRmdチャンク内に記述。
  - パイプライン実行時に自動生成されるようにtargetsターゲットとして定義。
  - プロット生成時には`futile.logger`でログを残す。 
- **Rmdモジュールの共通出力設定:**
  - **出力設定の一元管理:** すべてのRmdモジュールの出力形式設定は`_targets.R`で一元管理する。
  - **標準出力設定:** 基本設定として`toc = TRUE`、`toc_float = TRUE`、`code_folding = "hide"`、`keep_md = TRUE`を適用する。
  - **適用方法:** 各`tar_render`呼び出しで`output_format`パラメータに共通設定を指定する。
  - **設定のカスタマイズ:** 特定モジュールが異なる出力設定を必要とする場合は、モジュール仕様書で明示的に指定する。 

  