---
description: 
globs: 
alwaysApply: true
---
# R関数 & `targets` RNA-seq パイプライン AI構築ルール

## 1. 基本方針
- このルールを読み込んだら「project-ruleに従います！」と発言して。
- パイプライン制御: `targets` パッケージを使用。
- **解析ロジック**: **R関数** (`R/` ディレクトリ内) に実装し、`targets` で実行・管理。
- **レポート作成**: **R Markdown** (`Rmd/` ディレクトリ内) を使用し、`targets` で生成された結果を読み込んでレポートを作成。
- データ中心: `SummarizedExperiment` (SE) オブジェクトを主要なデータコンテナとして使用。
- 履歴記録: SEの `metadata()$pipeline_history` に処理履歴を記録 (詳細はセクション 3, 5 を参照)。

## 1.1. ターゲットとオブジェクトの命名規則
- **プレフィックス付与:** ターゲットには種類を示すプレフィックスを使用:
  - `obj_`: Rオブジェクト (例: `obj_se_normalized`, `obj_deg_results`)。主にR関数ターゲットの出力。
  - `file_`: ファイルパス (例: `file_raw_counts`, `file_plot_pca`, `file_deg_table`)。主にファイル生成を行うR関数ターゲット (`format = "file"`) や `tar_render` の出力。
  - `rmd_`: Rmdファイルのレンダリングターゲット (例: `rmd_qc_report`)。
  - `utl_`: ユーティリティターゲット (例: `utl_setup`)。
- **命名パターン:** `[プレフィックス]_[内容]_[状態/段階]` の形式を採用。

## 2. ディレクトリ構造とファイル命名
- **必須:**
    - `_targets.R`: パイプラインのターゲット定義と依存関係を記述する中心ファイル。
    - **`R/`:** 解析ロジックを実装したR関数や共通ユーティリティ関数を格納。
    - `Rmd/`: レポート作成用のRmdファイルを格納。
    - `data/{experiment_id}/`: 実験ごとの入力データを格納。
    - `results/{experiment_id}/`: 実験ごとの出力結果 (プロット、テーブル等) を格納（`plots/`, `tables/`, `reports/` サブディレクトリを推奨）。
    - `logs/{experiment_id}/`: 実験ごとのログファイルを格納。
    - `tests/`: R関数のユニットテスト。
- **ファイルパス:** 原則としてプロジェクトルートからの相対パスを使用。**ただし、ファイル出力や読み込みには絶対パスを使用すること。**

## 3. データフローと役割分担
- **実験 ID (`experiment_id`):** パイプライン実行時に指定。
- **`_targets.R`**:
    - パイプライン全体の流れ（ターゲット定義と依存関係）を定義。
    - `experiment_id` に基づき入力ファイルパス (`file_...`) を決定。
    - **R関数ターゲット (`obj_...`, `file_...`)**:
        - `R/` 内の関数を呼び出し、データ処理、解析、ファイル生成 (プロット、テーブル等) を実行。
        - 入力として他のターゲット (データオブジェクトやファイルパス) を受け取る。
        - 結果としてRオブジェクト (`obj_`) またはファイルパス (`file_`) を返す。
    - **Rmdレンダリングターゲット (`rmd_...`)**:
        - `tarchetypes::tar_render()` を使用して `Rmd/` 内のファイルをレンダリング。
        - レポート固有のパラメータは `params` 引数で渡す。
- **R関数 (`R/`):**
    - 独立した解析ステップ (データ読み込み、前処理、正規化、DEG解析、QC計算、**プロット/テーブル用データ生成**、**ファイル保存**など) を実装。
    - 明確な入力と出力を持つ。
    - `futile.logger` によるログ記録 (セクション 4 参照)。
    - SEオブジェクトを操作する場合、メタデータ更新処理を含む (下記「メタデータ」参照)。
- **R Markdown (`Rmd/`):**
    - **結果の読み込みと表示に注力:** `targets::tar_read()` を使用して、依存するターゲットの結果 (データオブジェクト `obj_...` やファイルパス `file_...`) を**固定のシンボル名で**読み込む。
    - **依存関係の自動検出:** `tar_render()` が `tar_read()` を検出し依存関係を解決するため、動的なターゲット名指定や `tar_read_raw()` は使用しない。
    - 読み込んだデータやファイル (プロット画像、テーブルファイル等) を用いて、解説、要約、可視化を含むレポートを生成。
    - **計算負荷の高い処理や主要な解析ロジックは実装しない。**
- **メタデータ:**
    - R関数内でSEオブジェクトが更新される際に `metadata()$pipeline_history` に追記する。
    - 共通関数 `add_pipeline_history()` (セクション 5 参照) を使用して履歴を記録する。

## 4. ロギング (`futile.logger` 必須)
- **基本方針:**
    - パイプライン実行状況の追跡と再現性向上のため、**`futile.logger`によるログ記録を必須とする**。
    - **R関数内のログ記録は、`_targets.R` で呼び出す `run_with_logging` ラッパー関数 (`R/utility.R`) によって開始・設定される。**
    - ログはログファイル(`logs/{experiment_id}/`)にのみ出力し、**レンダリング出力(HTML/MD)には表示しない**。
    - Rmd内では、`tar_read()` の呼び出しなどを記録する程度にとどめる。
- **ログ設定:**
    - **ログレベル:** TRACE(最詳細) < DEBUG < INFO < WARN < ERROR < FATAL(最重大)。
    - **出力制御:** 基本は`_targets.R`で`flog.threshold(INFO)`で一元管理、**R関数**とRmdでは`TRACE`レベルまで記録。
    - **ログフォーマット:** `[タイムスタンプ] [ログレベル] [識別子] メッセージ`。
    - **ファイル名:** 
        - `logs/{experiment_id}/_targets.log` (**パイプライン実行開始時に削除され、最新の実行ログのみ記録**)
        - `logs/{experiment_id}/{clean_target_name}.log` (**`run_with_logging` ラッパーがターゲット名からプレフィックスを除去して生成。関数実行ごとに削除・新規作成される**)
        - `logs/{experiment_id}/{Rmdファイル名}.log` (**Rmdレンダリングごとに上書きまたは削除・新規作成**)
- **必須ロギング内容:**
    - **`_targets.R`:** パイプライン開始/終了、設定値読み込み、ターゲット実行開始/終了（`run_with_logging` または `render_rmd_with_logging` 呼び出し: `Starting target '{ターゲット名}' (logging to logs/{experiment_id}/{個別ログファイル名})`形式）、ターゲット実行終了 (`Finished target '{ターゲット名}'`形式）。
    - **R関数:** **`run_with_logging` ラッパーから `logger_name` 引数を受け取る。関数内部でのログファイル設定は不要。** 受け取った `logger_name` を使用してログを記録 (`flog.info(..., name = logger_name)` など)。関数開始/終了、入力パラメータ、主要処理ステップ、生成/更新したオブジェクトやファイル、SEメタデータ更新内容、エラー/警告を記録。
    - **Rmd:** セットアップチャンクでロガー設定（`setup_rmd_logging`を使用、必ず`include=FALSE`）。個別ログファイル (`logs/{experiment_id}/{Rmdファイル名}.log`) にレンダリング中の詳細ログ (TRACEレベルまで) を記録。`_targets.log` への開始/終了ログは `render_rmd_with_logging` が担当。
    - **ログレベルの使い分け:** TRACE/DEBUG(詳細処理過程)、INFO(主要ステップ)、WARN/ERROR(問題発生)。
- **共通ロギング関数:**
    - **`run_with_logging(func, ..., target_name, experiment_id, log_level)`**: `_targets.R`からR関数を実行する際のラッパー関数。`target_name`からプレフィックスを除去した個別ログファイル名を生成し、ロガー設定を行った上で関数を実行し、開始/終了ログを `_targets.log` に出力する。実行関数には`logger_name`引数を追加して渡す。
    - **`setup_rmd_logging(experiment_id, rmd_path)`**: Rmdファイル用の共通ロギング設定関数。Rmdファイルのセットアップチャンクで`child="Rmd/common/setup_logging.Rmd"`を使って呼び出す。個別ログファイルを設定・初期化し、ロガー名を返す。
    - **`add_pipeline_history(se, step_id, function_name, parameters, details, ...)`**: SEオブジェクトのメタデータにパイプライン履歴を追加する共通関数 (セクション 5 参照)。
    - **Rmd用ログラッパー関数**: `log_info()`, `log_debug()`, `log_trace()`, `log_warn()`, `log_error()`などの関数が`Rmd/common/setup_logging.Rmd`で定義され、チャンク内でのロギングに使用できる。

## 5. コーディング規約とテスト
- **スタイル:** Tidyverse スタイル + Bioconductor コーディング規約。
- **コメント言語:** **コード内のコメントは原則として日本語で記述する。**
- **共通ユーティリティ関数:**
    - **`R/utility.R`** を参照して利用可能な関数を確認する。
    - ロギング設定 (`run_with_logging`, `setup_rmd_logging`) や履歴記録 (`add_pipeline_history`) などの共通機能を使用してコード重複を避ける。
    - **R関数**やRmdモジュールから明示的に関数を呼び出す。
    - 新たな共通関数を追加する場合は、`R/utility.R`に実装する。
- **テスト (TDD):** **R関数**実装時は、**Red-Green-Refactor サイクル**を厳守:
    1. **Red:** 失敗するテストコードを `testthat` で `tests/testthat/` に記述。
    2. **Green:** テストをパスする最小限のコードを **R関数内**に実装。
    3. **Refactor:** テストが通る状態を維持しつつコードをリファクタリング。
    - テスト記述には `testthat` パッケージを使用。
    - テストの実行は`bash command_testthat.sh file {test_fil_name}.R`を使用（使い方は--help)。

## 6. 再現性とパッケージ管理
- **再現性:** `targets` で依存関係とキャッシュを管理。
- **パッケージ管理:** `renv` を使用。`renv::snapshot()` で `renv.lock` を更新。**R関数およびRmdで必要な `library()` を記述。** `sessionInfo()` はレポートに含める。

## 7. パイプライン構成とロジック分離 (`_targets.R`)
- **必須原則: 計算ロジックとレポート作成の分離**
  - **計算・解析ロジック:** すべて `R/` ディレクトリ内の独立したR関数として実装する。これにはデータ読み込み、前処理、正規化、DEG解析、QC計算、エンリッチメント解析、**プロット/テーブル用データの生成**などが含まれる。
  - **レポート作成:** `Rmd/` 内の Rmd ファイルで行い、`targets` で生成された結果の読み込み、表示、解釈に専念する。
- **ターゲット定義 (`_targets.R`):**
  - **入力データターゲット (`file_...`)**: 必要に応じて入力ファイルパスを定義。
  - **R関数実行ターゲット (`obj_...`, `file_...`)**:
    - `R/` 内の関数を呼び出すターゲットを定義する。
    - **中間データや最終的なデータオブジェクト** (例: 正規化済みSE、DEG結果) は `obj_...` ターゲットとして定義する。
    - **プロットやテーブルなどのファイル出力**は、対応するR関数がファイルパスを返すように実装し、`file_...` ターゲット (`format = "file"`) として定義する (詳細はセクション 8 参照)。
    - ターゲット間の依存関係を通じて、解析ステップの順序を定義する。
  - **Rmdレンダリングターゲット (`rmd_...`)**:
    - `tarchetypes::tar_render()` を使用してRmdファイルをレンダリングするターゲットを定義する。
    - `tar_render()` はRmdファイル内の `targets::tar_read()` を検出し、依存関係を自動的に解決する。
    - レポート固有のパラメータは `params` 引数で渡す。
- **パイプラインの柔軟性:** `_targets.R` の修正で R 関数の組み合わせやパラメータ変更、条件分岐による実行制御が可能。`experiment_id` を変更して再実行することで、異なる実験データに同じ解析フローを適用可能。
- パイプラインの実行には`bash command_targets.sh`スクリプトを使用（使い方は--help）。

## 8. 可視化・レポート生成とファイル管理
- **原則: 生成ロジックの分離とファイルベースの連携**
  - **プロット/テーブル生成プロセス:**
    1. **データ生成関数 (`R/`)**: プロットやテーブルの元となるデータ (例: `data.frame`) を生成する R 関数を実装する。
    2. **描画/保存関数 (`R/`)**: 上記データを受け取り、`ggplot` オブジェクト作成やテーブル整形を行い、**ファイルを指定されたパス (`results/{experiment_id}/plots/` または `results/{experiment_id}/tables/`) に保存し、そのファイルパスを返す** R 関数を実装する。**必ず絶対パスを使用してファイルを保存・返却すること。**
    3. **ターゲット定義 (`_targets.R`):**
       - データ生成関数を呼び出す `obj_...` ターゲットを定義する。
       - 上記 `obj_...` ターゲットを入力とし、描画/保存関数を呼び出してファイルパスを返す `file_...` ターゲット (`format = "file"`) を定義する。
- **Rmd での利用:**
  - Rmd 内では `targets::tar_read(file_plot_pca)` のように**ファイルパスを表すターゲット名**を読み込む。
  - `knitr::include_graphics()` を使用してプロット画像を表示。**必ず `options(knitr.graphics.rel_path = FALSE)` を設定し、絶対パスで画像を読み込むこと。**
  - `readr::read_csv()` や `DT::datatable()` などを使用してテーブルファイルの内容を表示。**絶対パスを使用してファイルを読み込むこと。**
- **プロットの標準スタイル:**
  - **テーマ:** `theme_classic()`を基本とし、プロットタイトルは中央寄せ。
  - **言語:** プロット内のテキストはすべて英語（レポート本文は日本語可）。
  - **ファイル形式:** 基本はPNG、必要に応じてPDF、HTML。
  - **命名規則:** `{プロットタイプ}_{データタイプ}_{条件}.{拡張子}`
  - **保存場所:** `results/{experiment_id}/plots/`ディレクトリ。
  - **サイズ・解像度:** レポート表示に適したサイズと解像度（300dpi以上推奨）。
- **テーブルの標準スタイル:**
  - **ファイル形式:** 基本はCSVまたはTSV。
  - **命名規則:** `{テーブル内容}_{条件}.{拡張子}`
  - **保存場所:** `results/{experiment_id}/tables/`ディレクトリ。

  